{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "Stmt1460475162000",
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": "${aws_config_role_arn}"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "config:DeleteDeliveryChannel",
                    "config:DescribeConfigurationRecorders",
                    "config:DescribeDeliveryChannels",
                    "config:PutConfigurationRecorder",
                    "config:StopConfigurationRecorder"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "ConfigurationRecorderSanitiser": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "// dependencies",
                "var AWS = require('aws-sdk');",
                "var response = require('cfn-response');",
                "var configservice = new AWS.ConfigService();",
                "exports.handler = function(event, context, callback) {",
                "    ",
                "    console.log('Checking if a configuration recorder exists')",
                "    configservice.describeConfigurationRecorders(null, function(err, data) {",
                "      if (err) console.log(err, err.stack); // an error occurred",
                "      else{",
                "        if(data.ConfigurationRecorders.length > 0){",
                "            // successful response",
                "            var configurationRecorders = data",
                "            console.log('Found Configuration Recoder: ' + configurationRecorders.ConfigurationRecorders[0].name);",
                "            console.log('Checking for the existence of a Delivery Channel')",
                "            configservice.describeDeliveryChannels(null, function(err, data) {",
                "                if (err) console.log(err, err.stack); // an error occurred",
                "                else{",
                "                    if(data.DeliveryChannels.length > 0){",
                "                        console.log('There is a Delivery Channel, let\\'s delete it!')",
                "                        deliveryChannels = data",
                "                        console.log('Making sure the Delivery Recorder is stopped')",
                "                        var params = { ConfigurationRecorderName: configurationRecorders.ConfigurationRecorders[0].name};",
                "                        configservice.stopConfigurationRecorder(params, function(err, data) {",
                "                          if (err) console.log(err, err.stack); // an error occurred",
                "                          else{",
                "                              console.log('Deleting Delivery Channel')",
                "                               params = { DeliveryChannelName: deliveryChannels.DeliveryChannels[0].name }",
                "                                configservice.deleteDeliveryChannel(params, function(err, data) {",
                "                                  if (err) console.log(err, err.stack); // an error occurred",
                "                                  else  console.log('Successfully deleted Delivery Channel')    // successful response",
                "                                });",
                "                          }   ",
                "                        }); ",
                "                    }else{",
                "                        console.log('No Delivery Channel to Delete')",
                "                    }",
                "                }",
                "            })",
                "            ",
                "            console.log('Setting the Configuration Recorder\\'s IAM role to the one created by our CFN stack: ' + event.ResourceProperties.RoleARN)",
                "            var params = {",
                "              ConfigurationRecorder: {",
                "                name: configurationRecorders.ConfigurationRecorders[0].name,",
                "                recordingGroup: configurationRecorders.ConfigurationRecorders[0].recordingGroup,",
                "                roleARN: event.ResourceProperties.RoleARN",
                "              }",
                "            };",
                "            configservice.putConfigurationRecorder(params, function(err, data) {",
                "              if (err) console.log(err, err.stack); // an error occurred",
                "              else     console.log('Successfull set the Configuration Recorder\\'s IAM role to the one created by our CFN stack');           // successful response",
                "            });",
                "            ",
                "            // Return the name of the configuration recorder as one exists",
                "            response.send(event, context, response.SUCCESS, {'ConfigurationRecorder':configurationRecorders.ConfigurationRecorders[0].name});",
                "        }else{",
                "            console.log('No Configuration Records exist, returning default recorder name')",
                "            response.send(event, context, response.SUCCESS, {'ConfigurationRecorder':'ConfigurationRecorder'});",
                "        }",
                "      }   ",
                "    });",
                "};"
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Runtime": "nodejs",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        }
      }
    },
    "ConfigurationRecorderSanitisationResults": {
      "Type": "Custom::ConfigurationRecorderSanitisationResults",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ConfigurationRecorderSanitiser",
            "Arn"
          ]
        },
        "RoleARN": "${aws_config_role_arn}"
      }
    },

    "ConfigurationRecorder": {
      "Type": "AWS::Config::ConfigurationRecorder",
      "Properties": {
        "Name": {
          "Fn::GetAtt": [
            "ConfigurationRecorderSanitisationResults",
            "ConfigurationRecorder"
          ]
        },
        "RecordingGroup": {
          "AllSupported": true,
          "IncludeGlobalResourceTypes": true
        },
        "RoleARN":"${aws_config_role_arn}"
      },
      "DependsOn": [
        "DeliveryChannel"
      ]
    },
    "DeliveryChannel": {
      "Type": "AWS::Config::DeliveryChannel",
      "Properties": {
        "Name": "default",
        "S3BucketName": "${delivery_channel_s3_bucket_name}",
        "S3KeyPrefix": "${delivery_channel_s3_bucket_prefix}"
      },
      "DependsOn": [
        "ConfigurationRecorderSanitisationResults"
      ]
    }
  }
}
